{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/racesense/racesense-frontend/src/pages/Race.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './Race.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = process.env.REACT_APP_API_BASE || `http://${window.location.hostname}:5000`;\nconst WS_URL = process.env.REACT_APP_WS_URL || `ws://${window.location.hostname}:5001`;\n\n// Utility: calcola distanza Haversine (m)\nfunction haversine(lat1, lon1, lat2, lon2) {\n  const R = 6371000;\n  const toRad = d => d * Math.PI / 180;\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) ** 2 + Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2;\n  return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\n// Trova il settore più vicino al punto GPS\nfunction findClosestSector(lat, lon, sectors) {\n  let minDist = Infinity;\n  let closestIdx = 0;\n  sectors.forEach((s, i) => {\n    const d = haversine(lat, lon, s.lat, s.lon);\n    if (d < minDist) {\n      minDist = d;\n      closestIdx = i;\n    }\n  });\n  return closestIdx;\n}\nexport default function RacePage() {\n  _s();\n  var _circuitData$stats, _circuitData$stats$le, _circuitData$params, _circuitData$sectors;\n  // ========== SETUP GARA ==========\n  const [setupMode, setSetupMode] = useState(true); // true = setup, false = racing\n  const [circuits, setCircuits] = useState([]);\n  const [selectedCircuit, setSelectedCircuit] = useState(null);\n  const [circuitData, setCircuitData] = useState(null);\n  const [allPilots, setAllPilots] = useState([]); // Tutti i piloti disponibili\n  const [selectedPilots, setSelectedPilots] = useState([]); // Piloti selezionati per la gara\n  const [totalLaps, setTotalLaps] = useState(10); // Giri da completare\n\n  // ========== STATO GARA ==========\n  const [pilots, setPilots] = useState([]); // Piloti in gara\n  const [raceActive, setRaceActive] = useState(false);\n  const [driversState, setDriversState] = useState({}); // { MAC: { lat, lon, speed, sectorIdx, lapCount, lastLapTime, ... } }\n  const [leaderboard, setLeaderboard] = useState([]); // Classifica ordinata\n  const [activeBattles, setActiveBattles] = useState([]); // Battaglie in corso\n\n  const canvasRef = useRef(null);\n  const wsRef = useRef(null);\n  const animFrameRef = useRef(null);\n\n  // ========== Carica circuiti e piloti disponibili ==========\n  useEffect(() => {\n    fetch(`${API_BASE}/api/circuits`).then(r => r.json()).then(data => setCircuits(data)).catch(e => console.error('Errore caricamento circuiti:', e));\n    fetch(`${API_BASE}/api/pilots`).then(r => r.json()).then(data => setAllPilots(data)).catch(e => console.error('Errore caricamento piloti:', e));\n  }, []);\n\n  // ========== Carica dettagli circuito selezionato ==========\n  useEffect(() => {\n    if (!selectedCircuit) {\n      setCircuitData(null);\n      return;\n    }\n    fetch(`${API_BASE}/api/circuits/${selectedCircuit}`).then(r => r.json()).then(data => {\n      var _data$sectors;\n      setCircuitData(data);\n      console.log(`Circuito caricato: ${data.name}, settori: ${((_data$sectors = data.sectors) === null || _data$sectors === void 0 ? void 0 : _data$sectors.length) || 0}`);\n    }).catch(e => console.error('Errore caricamento circuito:', e));\n  }, [selectedCircuit]);\n\n  // ========== WebSocket GPS Live ==========\n  useEffect(() => {\n    if (!raceActive) {\n      if (wsRef.current) {\n        wsRef.current.close();\n        wsRef.current = null;\n      }\n      return;\n    }\n    const ws = new WebSocket(WS_URL);\n    wsRef.current = ws;\n    ws.onopen = () => console.log('[WS] Connesso al feed GPS');\n    ws.onclose = () => console.log('[WS] Disconnesso');\n    ws.onerror = e => console.error('[WS] Errore:', e);\n    ws.onmessage = event => {\n      try {\n        const gps = JSON.parse(event.data);\n        handleGPSUpdate(gps);\n      } catch (e) {\n        console.error('[WS] Parse error:', e);\n      }\n    };\n    return () => {\n      if (ws.readyState === WebSocket.OPEN) ws.close();\n    };\n  }, [raceActive]);\n\n  // ========== Gestione aggiornamenti GPS ==========\n  const handleGPSUpdate = useCallback(gps => {\n    if (!(circuitData !== null && circuitData !== void 0 && circuitData.sectors)) return;\n    const {\n      mac,\n      lat,\n      lon,\n      speedKmh,\n      ts\n    } = gps;\n    const sectorIdx = findClosestSector(lat, lon, circuitData.sectors);\n    const totalSectors = circuitData.sectors.length;\n    setDriversState(prev => {\n      const existing = prev[mac] || {\n        mac,\n        name: `Driver ${mac.slice(-4)}`,\n        lat,\n        lon,\n        speedKmh: 0,\n        sectorIdx: sectorIdx,\n        lapCount: 0,\n        lastLapTime: null,\n        bestLapTime: null,\n        lastSectorIdx: sectorIdx,\n        lapStartTime: Date.now(),\n        trail: [],\n        // ultimi N punti per scia\n        color: `hsl(${Math.random() * 360}, 75%, 55%)` // Colori più saturi\n      };\n\n      // Rileva crossing linea traguardo (settore 0)\n      let newLapCount = existing.lapCount;\n      let newLapTime = existing.lastLapTime;\n      let newBestLap = existing.bestLapTime;\n      if (existing.lastSectorIdx > totalSectors - 10 && sectorIdx < 10) {\n        // Probabile completamento giro\n        const lapDuration = (Date.now() - existing.lapStartTime) / 1000; // secondi\n        if (lapDuration > 5) {\n          // Evita falsi positivi\n          newLapCount = existing.lapCount + 1;\n          newLapTime = lapDuration;\n          if (!newBestLap || lapDuration < newBestLap) {\n            newBestLap = lapDuration;\n          }\n          console.log(`[LAP] ${mac} completato giro ${newLapCount} in ${lapDuration.toFixed(2)}s`);\n        }\n      }\n\n      // Aggiorna trail (max 20 punti)\n      const newTrail = [...existing.trail, {\n        lat,\n        lon\n      }].slice(-20);\n      return {\n        ...prev,\n        [mac]: {\n          ...existing,\n          lat,\n          lon,\n          speedKmh,\n          sectorIdx,\n          lastSectorIdx: sectorIdx,\n          lapCount: newLapCount,\n          lastLapTime: newLapTime,\n          bestLapTime: newBestLap,\n          lapStartTime: newLapCount > existing.lapCount ? Date.now() : existing.lapStartTime,\n          trail: newTrail,\n          updatedAt: Date.now()\n        }\n      };\n    });\n  }, [circuitData]);\n\n  // ========== Aggiorna classifica e rileva battaglie ==========\n  useEffect(() => {\n    const sorted = Object.values(driversState).sort((a, b) => {\n      if (a.lapCount !== b.lapCount) return b.lapCount - a.lapCount;\n      return b.sectorIdx - a.sectorIdx;\n    });\n    setLeaderboard(sorted);\n\n    // Rileva battaglie (piloti < 20m di distanza sullo stesso giro)\n    const battles = [];\n    for (let i = 0; i < sorted.length - 1; i++) {\n      const driver1 = sorted[i]; // Davanti\n      const driver2 = sorted[i + 1]; // Dietro\n\n      // Solo se stesso giro\n      if (driver1.lapCount === driver2.lapCount) {\n        const dist = haversine(driver1.lat, driver1.lon, driver2.lat, driver2.lon);\n        if (dist < 20) {\n          // Meno di 20 metri\n          battles.push({\n            leader: driver1,\n            chaser: driver2,\n            distance: dist,\n            position: i + 1 // Posizione del leader\n          });\n        }\n      }\n    }\n    setActiveBattles(battles);\n  }, [driversState]);\n\n  // ========== Rendering Canvas ==========\n  useEffect(() => {\n    if (!circuitData || !canvasRef.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const dpr = window.devicePixelRatio || 1;\n    const resizeCanvas = () => {\n      const rect = canvas.getBoundingClientRect();\n      canvas.width = rect.width * dpr;\n      canvas.height = rect.height * dpr;\n      ctx.scale(dpr, dpr);\n      canvas.style.width = `${rect.width}px`;\n      canvas.style.height = `${rect.height}px`;\n    };\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n    const animate = () => {\n      const w = canvas.width / dpr;\n      const h = canvas.height / dpr;\n\n      // Clear con sfondo scuro\n      ctx.fillStyle = '#0a0e1a';\n      ctx.fillRect(0, 0, w, h);\n\n      // ========== GRIGLIA SFONDO (stile F1 telemetria) ==========\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.03)';\n      ctx.lineWidth = 1;\n      const gridSize = 40;\n      for (let x = 0; x < w; x += gridSize) {\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, h);\n        ctx.stroke();\n      }\n      for (let y = 0; y < h; y += gridSize) {\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(w, y);\n        ctx.stroke();\n      }\n      if (!circuitData.pathPoints || circuitData.pathPoints.length === 0) {\n        ctx.fillStyle = '#fff';\n        ctx.font = '16px \"Roboto Mono\", monospace';\n        ctx.textAlign = 'center';\n        ctx.fillText('Caricamento tracciato...', w / 2, h / 2);\n        animFrameRef.current = requestAnimationFrame(animate);\n        return;\n      }\n\n      // ========== Calcola bounds per fitting (converti lat/lon in coordinate schermo) ==========\n      const lats = circuitData.pathPoints.map(p => p.lat);\n      const lons = circuitData.pathPoints.map(p => p.lon);\n      const minLat = Math.min(...lats);\n      const maxLat = Math.max(...lats);\n      const minLon = Math.min(...lons);\n      const maxLon = Math.max(...lons);\n      const latRange = maxLat - minLat || 1e-5;\n      const lonRange = maxLon - minLon || 1e-5;\n\n      // Calcola fattore di scala per lat/lon → pixel, mantenendo aspect ratio\n      const padding = 60;\n      const usableW = w - 2 * padding;\n      const usableH = h - 2 * padding;\n\n      // Scala in base al range più grande\n      const scaleX = usableW / lonRange;\n      const scaleY = usableH / latRange;\n      const scale = Math.min(scaleX, scaleY);\n\n      // Centro il tracciato\n      const trackW = lonRange * scale;\n      const trackH = latRange * scale;\n      const offsetX = (w - trackW) / 2;\n      const offsetY = (h - trackH) / 2;\n\n      // Funzione di proiezione: lat/lon → x,y canvas\n      const project = (lat, lon) => {\n        const x = offsetX + (lon - minLon) * scale;\n        const y = offsetY + (maxLat - lat) * scale; // inverti Y (lat cresce verso l'alto)\n        return {\n          x,\n          y\n        };\n      };\n\n      // ========== PISTA: Disegna bordo esterno scuro (asfalto) ==========\n      const trackWidthPx = Math.max(25, 40); // Larghezza pista in pixel\n\n      ctx.strokeStyle = '#1a2332';\n      ctx.lineWidth = trackWidthPx + 12;\n      ctx.lineCap = 'round';\n      ctx.lineJoin = 'round';\n      ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\n      ctx.shadowBlur = 20;\n      ctx.beginPath();\n      circuitData.pathPoints.forEach((p, i) => {\n        const {\n          x,\n          y\n        } = project(p.lat, p.lon);\n        if (i === 0) ctx.moveTo(x, y);else ctx.lineTo(x, y);\n      });\n      ctx.stroke();\n      ctx.shadowBlur = 0;\n\n      // ========== PISTA: Asfalto principale ==========\n      ctx.strokeStyle = '#2d3f56';\n      ctx.lineWidth = trackWidthPx;\n      ctx.stroke();\n\n      // ========== PISTA: Linea centrale tratteggiata ==========\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.15)';\n      ctx.lineWidth = 2;\n      ctx.setLineDash([10, 10]);\n      ctx.beginPath();\n      circuitData.pathPoints.forEach((p, i) => {\n        const {\n          x,\n          y\n        } = project(p.lat, p.lon);\n        if (i === 0) ctx.moveTo(x, y);else ctx.lineTo(x, y);\n      });\n      ctx.stroke();\n      ctx.setLineDash([]); // Reset dash\n\n      // ========== PISTA: Bordi bianchi (vie di fuga) ==========\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n      ctx.lineWidth = trackWidthPx + 2;\n      ctx.globalAlpha = 0.3;\n      ctx.stroke();\n      ctx.globalAlpha = 1;\n\n      // ========== LINEA TRAGUARDO (Start/Finish) - Perpendicolare alla pista ==========\n      if (circuitData.pathPoints && circuitData.pathPoints.length > 5) {\n        const startPt = circuitData.pathPoints[0];\n        const nextPt = circuitData.pathPoints[3]; // Usa un punto più lontano per angolo preciso\n        const {\n          x: x1,\n          y: y1\n        } = project(startPt.lat, startPt.lon);\n        const {\n          x: x2,\n          y: y2\n        } = project(nextPt.lat, nextPt.lon);\n\n        // Calcola angolo della pista\n        const trackAngle = Math.atan2(y2 - y1, x2 - x1);\n\n        // PERPENDICULAR: ruota di 90 gradi rispetto alla direzione della pista\n        const perpAngle = trackAngle + Math.PI / 2;\n\n        // Dimensioni bandiera (attraversa la pista)\n        const flagWidth = trackWidthPx * 0.85; // Larghezza che copre la pista\n        const flagHeight = 5; // Altezza sottile\n        const checkSize = 5;\n        ctx.save();\n        ctx.translate(x1, y1);\n        ctx.rotate(perpAngle); // Ruota perpendicolare\n\n        // Pattern a scacchi (bianco/nero) - SOLO QUESTO, NESSUN BORDO\n        const numChecksW = Math.ceil(flagWidth / checkSize);\n        const numChecksH = Math.ceil(flagHeight / checkSize);\n        for (let i = 0; i < numChecksW; i++) {\n          for (let j = 0; j < numChecksH; j++) {\n            const isWhite = (i + j) % 2 === 0;\n            ctx.fillStyle = isWhite ? '#ffffff' : '#000000';\n            ctx.fillRect(-flagWidth / 2 + i * checkSize, -flagHeight / 2 + j * checkSize, checkSize, checkSize);\n          }\n        }\n        ctx.restore();\n\n        // Testo \"START\" piccolo e discreto\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';\n        ctx.font = 'bold 8px \"Roboto Mono\", monospace';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n\n        // Calcola posizione testo sopra la linea (perpendicolare alla pista)\n        const textOffsetX = Math.cos(perpAngle) * 10;\n        const textOffsetY = Math.sin(perpAngle) * 10;\n        ctx.fillText('START', x1 - textOffsetX, y1 - textOffsetY);\n      }\n\n      // ========== SETTORI: Visualizza marker ogni N settori ==========\n      if (circuitData.sectors && circuitData.sectors.length > 50) {\n        const sectorInterval = Math.floor(circuitData.sectors.length / 8); // 8 marker\n        ctx.fillStyle = 'rgba(225, 6, 0, 0.6)';\n        ctx.font = 'bold 10px \"Roboto Mono\", monospace';\n        ctx.textAlign = 'center';\n        for (let i = 0; i < circuitData.sectors.length; i += sectorInterval) {\n          if (i === 0) continue; // Skip start/finish\n          const sector = circuitData.sectors[i];\n          const {\n            x,\n            y\n          } = project(sector.lat, sector.lon);\n\n          // Pallino settore\n          ctx.beginPath();\n          ctx.arc(x, y, 4, 0, Math.PI * 2);\n          ctx.fill();\n\n          // Numero settore\n          ctx.fillStyle = '#fff';\n          ctx.fillText(`S${i}`, x, y - 10);\n          ctx.fillStyle = 'rgba(225, 6, 0, 0.6)';\n        }\n      }\n\n      // ========== PRIMA: Disegna tutte le scie (dietro i piloti) ==========\n      const driversArray = Object.values(driversState);\n      driversArray.forEach(driver => {\n        const {\n          lat,\n          lon,\n          trail,\n          color\n        } = driver;\n        if (trail && trail.length > 1) {\n          // Gradiente fade-out sulla scia\n          ctx.strokeStyle = color;\n          ctx.lineWidth = 3;\n          ctx.lineCap = 'round';\n          ctx.lineJoin = 'round';\n          for (let i = 0; i < trail.length - 1; i++) {\n            const alpha = i / trail.length * 0.4; // Fade da 0 a 0.4\n            ctx.globalAlpha = alpha;\n            const pt1 = trail[i];\n            const pt2 = trail[i + 1];\n            const {\n              x: x1,\n              y: y1\n            } = project(pt1.lat, pt1.lon);\n            const {\n              x: x2,\n              y: y2\n            } = project(pt2.lat, pt2.lon);\n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.stroke();\n          }\n          ctx.globalAlpha = 1;\n        }\n      });\n\n      // ========== DOPO: Disegna piloti ordinati per posizione (ultimo → primo) ==========\n      // Ordina: chi è dietro viene disegnato prima, chi è davanti ultimo (sopra)\n      const sortedDrivers = [...driversArray].sort((a, b) => {\n        // Ordina per giri + settori (chi è più indietro prima)\n        if (a.lapCount !== b.lapCount) return a.lapCount - b.lapCount;\n        return a.sectorIdx - b.sectorIdx;\n      });\n      sortedDrivers.forEach((driver, index) => {\n        const {\n          lat,\n          lon,\n          color,\n          speedKmh,\n          mac\n        } = driver;\n        const {\n          x,\n          y\n        } = project(lat, lon);\n        const isLeader = index === sortedDrivers.length - 1; // Ultimo nell'array = primo in gara\n        const pilotSize = isLeader ? 7 : 6; // Ridotti: leader 7px, altri 6px\n        const borderSize = 1.5; // Bordo più sottile\n\n        // ===== Ombra per profondità =====\n        ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n        ctx.shadowBlur = 6;\n        ctx.shadowOffsetX = 1;\n        ctx.shadowOffsetY = 1;\n\n        // ===== Alone esterno (solo leader) =====\n        if (isLeader) {\n          const pulse = 1 + 0.15 * Math.sin(Date.now() / 250);\n          ctx.fillStyle = color;\n          ctx.globalAlpha = 0.3;\n          ctx.beginPath();\n          ctx.arc(x, y, 12 * pulse, 0, Math.PI * 2); // Ridotto da 16 a 12\n          ctx.fill();\n          ctx.globalAlpha = 1;\n        }\n\n        // ===== Cerchio pilota con bordo bianco =====\n        // Bordo esterno bianco (più sottile)\n        ctx.fillStyle = '#ffffff';\n        ctx.beginPath();\n        ctx.arc(x, y, pilotSize + borderSize, 0, Math.PI * 2);\n        ctx.fill();\n\n        // Cerchio interno colorato\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.arc(x, y, pilotSize, 0, Math.PI * 2);\n        ctx.fill();\n\n        // Reset ombra\n        ctx.shadowColor = 'transparent';\n        ctx.shadowBlur = 0;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n\n        // ===== GAP dal Leader (distacco in tempo) =====\n        let gapText = '';\n        if (isLeader) {\n          gapText = '1°'; // Leader mostra posizione\n        } else {\n          // Calcola distacco basato su giri + settori\n          const leader = sortedDrivers[sortedDrivers.length - 1];\n          if (driver.lapCount < leader.lapCount) {\n            // Giro/i di distacco\n            const lapDiff = leader.lapCount - driver.lapCount;\n            gapText = `+${lapDiff}L`;\n          } else {\n            // Stesso giro: calcola distacco in settori (approssimazione tempo)\n            const sectorDiff = leader.sectorIdx - driver.sectorIdx;\n            if (sectorDiff > 0) {\n              // Stima: ~1 settore = ~0.01s (dipende dalla lunghezza)\n              const estimatedGap = (sectorDiff / 10).toFixed(1);\n              gapText = `+${estimatedGap}s`;\n            } else {\n              gapText = '+0.0s';\n            }\n          }\n        }\n        ctx.font = 'bold 9px \"Roboto Mono\", monospace';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n\n        // Sfondo scuro dietro il gap\n        const textMetrics = ctx.measureText(gapText);\n        const textWidth = textMetrics.width;\n        const textHeight = 11;\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(x - textWidth / 2 - 2, y - pilotSize - 15 - textHeight / 2, textWidth + 4, textHeight);\n\n        // Testo gap (verde per leader, bianco per altri)\n        ctx.fillStyle = isLeader ? '#15c130' : '#fff';\n        ctx.fillText(gapText, x, y - pilotSize - 15);\n\n        // ===== Nome pilota (solo per leader - più compatto) =====\n        if (isLeader) {\n          const driverName = driver.name || `#${mac.slice(-4)}`;\n          ctx.font = 'bold 9px \"Roboto Mono\", monospace'; // Più piccolo\n          const nameMetrics = ctx.measureText(driverName);\n\n          // Sfondo rosso più sottile\n          ctx.fillStyle = 'rgba(225, 6, 0, 0.9)';\n          ctx.fillRect(x - nameMetrics.width / 2 - 3, y + pilotSize + 6, nameMetrics.width + 6, 12);\n\n          // Testo\n          ctx.fillStyle = '#fff';\n          ctx.fillText(driverName, x, y + pilotSize + 12);\n        }\n      });\n      animFrameRef.current = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      if (animFrameRef.current) cancelAnimationFrame(animFrameRef.current);\n    };\n  }, [circuitData, driversState]);\n\n  // ========== Handler avvio gara ==========\n  const handleStartRace = () => {\n    if (!selectedCircuit || selectedPilots.length === 0) {\n      alert('Seleziona almeno un circuito e un pilota!');\n      return;\n    }\n\n    // Imposta i piloti selezionati come piloti in gara\n    setPilots(allPilots.filter(p => selectedPilots.includes(p.mac)));\n    setSetupMode(false);\n    setRaceActive(true);\n  };\n\n  // ========== Toggle selezione pilota ==========\n  const togglePilotSelection = mac => {\n    setSelectedPilots(prev => prev.includes(mac) ? prev.filter(m => m !== mac) : [...prev, mac]);\n  };\n\n  // ========== Formatta tempo giro (s → mm:ss.ms) ==========\n  const formatLapTime = seconds => {\n    if (!seconds) return '--:--.---';\n    const mins = Math.floor(seconds / 60);\n    const secs = (seconds % 60).toFixed(3);\n    return `${mins}:${secs.padStart(6, '0')}`;\n  };\n\n  // ========== UI ==========\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"race-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"race-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"race-header-left\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"race-logo\",\n          children: \"\\uD83C\\uDFC1 RACESENSE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"race-title\",\n          children: setupMode ? 'SETUP GARA' : 'LIVE RACE'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"race-header-right\",\n        children: raceActive && circuitData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"circuit-badge\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"circuit-icon\",\n            children: \"\\uD83D\\uDEE3\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"circuit-name\",\n            children: circuitData.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 7\n    }, this), setupMode ?\n    /*#__PURE__*/\n    // ========== SCHERMATA SETUP GARA ==========\n    _jsxDEV(\"div\", {\n      className: \"race-setup\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setup-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setup-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"setup-title\",\n            children: \"\\uD83D\\uDEE3\\uFE0F SELEZIONA CIRCUITO\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 636,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"circuits-grid\",\n            children: circuits.map(circuit => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `circuit-card ${selectedCircuit === circuit.id ? 'selected' : ''}`,\n              onClick: () => setSelectedCircuit(circuit.id),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"circuit-card-header\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"circuit-name\",\n                  children: circuit.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 645,\n                  columnNumber: 23\n                }, this), selectedCircuit === circuit.id && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"check-icon\",\n                  children: \"\\u2713\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 646,\n                  columnNumber: 58\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 644,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"circuit-card-body\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"circuit-stat\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"stat-icon\",\n                    children: \"\\uD83D\\uDCCF\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 650,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [(circuit.lengthMeters || 0).toFixed(0), \"m\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 651,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 649,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"circuit-stat\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"stat-icon\",\n                    children: \"\\uD83D\\uDCCD\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 654,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [circuit.points || 0, \" punti\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 655,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 653,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 648,\n                columnNumber: 21\n              }, this)]\n            }, circuit.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 637,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setup-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"setup-title\",\n            children: [\"\\uD83D\\uDC65 SELEZIONA PILOTI (\", selectedPilots.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 665,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pilots-grid\",\n            children: allPilots.map(pilot => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `pilot-card ${selectedPilots.includes(pilot.mac) ? 'selected' : ''}`,\n              onClick: () => togglePilotSelection(pilot.mac),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pilot-color\",\n                style: {\n                  background: pilot.color\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 673,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"pilot-info\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"pilot-name\",\n                  children: pilot.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 675,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"pilot-mac\",\n                  children: pilot.mac\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 676,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 674,\n                columnNumber: 21\n              }, this), selectedPilots.includes(pilot.mac) && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"check-icon\",\n                children: \"\\u2713\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 678,\n                columnNumber: 60\n              }, this)]\n            }, pilot.mac, true, {\n              fileName: _jsxFileName,\n              lineNumber: 668,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 666,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"setup-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"setup-title\",\n            children: \"\\uD83C\\uDFC1 NUMERO GIRI\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"laps-selector\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"lap-btn\",\n              onClick: () => setTotalLaps(Math.max(1, totalLaps - 1)),\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"laps-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"laps-number\",\n                children: totalLaps\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 695,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"laps-label\",\n                children: \"GIRI\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 696,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"lap-btn\",\n              onClick: () => setTotalLaps(totalLaps + 1),\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 698,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"start-race-btn-main\",\n          disabled: !selectedCircuit || selectedPilots.length === 0,\n          onClick: handleStartRace,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"btn-icon\",\n            children: \"\\uD83D\\uDEA6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"btn-text\",\n            children: \"AVVIA GARA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"btn-subtitle\",\n            children: selectedCircuit && selectedPilots.length > 0 ? `${selectedPilots.length} piloti × ${totalLaps} giri` : 'Seleziona circuito e piloti'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // ========== Vista gara live ==========\n    _jsxDEV(\"div\", {\n      className: \"race-live\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"race-main\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: canvasRef,\n            className: \"track-canvas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 730,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"track-overlay\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"live-indicator\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"live-dot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 735,\n                columnNumber: 19\n              }, this), \"LIVE\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 734,\n              columnNumber: 17\n            }, this), circuitData && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"track-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"track-stat\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"stat-icon\",\n                  children: \"\\uD83D\\uDCCF\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 743,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"stat-text\",\n                  children: [(_circuitData$stats = circuitData.stats) === null || _circuitData$stats === void 0 ? void 0 : (_circuitData$stats$le = _circuitData$stats.lengthMeters) === null || _circuitData$stats$le === void 0 ? void 0 : _circuitData$stats$le.toFixed(0), \"m\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 744,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 742,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"track-stat\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"stat-icon\",\n                  children: \"\\uD83D\\uDEE3\\uFE0F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 747,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"stat-text\",\n                  children: [((_circuitData$params = circuitData.params) === null || _circuitData$params === void 0 ? void 0 : _circuitData$params.widthMeters) || 6, \"m wide\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 748,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 746,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"track-stat\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"stat-icon\",\n                  children: \"\\uD83D\\uDCCD\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 751,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"stat-text\",\n                  children: [((_circuitData$sectors = circuitData.sectors) === null || _circuitData$sectors === void 0 ? void 0 : _circuitData$sectors.length) || 0, \" sectors\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 752,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 750,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 741,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 729,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n          className: \"leaderboard\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"leaderboard-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\uD83C\\uDFC6 CLASSIFICA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 762,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"leaderboard-subtitle\",\n              children: [leaderboard.length, \" Piloti in pista\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 763,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 761,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"leaderboard-list\",\n            children: leaderboard.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"no-drivers\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u23F3 In attesa di dati GPS...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 771,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                children: \"Avvia il simulatore o connetti dispositivi GPS\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 772,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 770,\n              columnNumber: 19\n            }, this) : leaderboard.map((driver, pos) => {\n              // Trova se questo pilota è in battle (come leader)\n              const battle = activeBattles.find(b => b.leader.mac === driver.mac);\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `leaderboard-item ${pos === 0 ? 'leader' : ''}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"position\",\n                    children: pos + 1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 782,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"driver-color\",\n                    style: {\n                      background: driver.color\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 784,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"driver-info\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"driver-name\",\n                      children: [driver.name, pos === 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"leader-badge\",\n                        children: \"\\uD83D\\uDC51\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 789,\n                        columnNumber: 45\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 787,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"driver-stats\",\n                      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"lap-count\",\n                        children: [\"Giro \", driver.lapCount]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 792,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        className: \"sector\",\n                        children: [\"S\", driver.sectorIdx]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 793,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 791,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 786,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"driver-times\",\n                    children: [pos === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"gap leader-gap\",\n                      children: \"LEADER\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 800,\n                      columnNumber: 31\n                    }, this) : (() => {\n                      const leader = leaderboard[0];\n                      let gapDisplay = '';\n                      if (driver.lapCount < leader.lapCount) {\n                        const lapDiff = leader.lapCount - driver.lapCount;\n                        gapDisplay = `+${lapDiff} ${lapDiff === 1 ? 'LAP' : 'LAPS'}`;\n                      } else {\n                        const sectorDiff = leader.sectorIdx - driver.sectorIdx;\n                        if (sectorDiff > 0) {\n                          const estimatedGap = (sectorDiff / 10).toFixed(1);\n                          gapDisplay = `+${estimatedGap}s`;\n                        } else {\n                          gapDisplay = '+0.0s';\n                        }\n                      }\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"gap\",\n                        children: gapDisplay\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 818,\n                        columnNumber: 38\n                      }, this);\n                    })(), driver.bestLapTime && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"best-lap\",\n                      children: [\"\\u23F1\\uFE0F \", formatLapTime(driver.bestLapTime)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 822,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 797,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 781,\n                  columnNumber: 25\n                }, this), battle && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"battle-inline\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"battle-line\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 832,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"battle-info\",\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"battle-icon\",\n                      children: \"\\u2694\\uFE0F\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 834,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"battle-gap\",\n                      children: [battle.distance.toFixed(1), \"m\"]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 835,\n                      columnNumber: 31\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"battle-speed\",\n                      children: battle.chaser.speed - battle.leader.speed > 0 ? '↑' : '↓'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 836,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 833,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"battle-line\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 840,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 831,\n                  columnNumber: 27\n                }, this)]\n              }, driver.mac, true, {\n                fileName: _jsxFileName,\n                lineNumber: 780,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 760,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"race-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"stop-race-btn\",\n          onClick: () => {\n            setSetupMode(true);\n            setRaceActive(false);\n            setDriversState({});\n            setLeaderboard([]);\n            setSelectedPilots([]);\n          },\n          children: \"\\u23F9\\uFE0F Termina Gara\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 853,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 852,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 726,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 613,\n    columnNumber: 5\n  }, this);\n}\n_s(RacePage, \"KznFQWDe6ofqazyraoTozYnjszk=\");\n_c = RacePage;\nvar _c;\n$RefreshReg$(_c, \"RacePage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","API_BASE","process","env","REACT_APP_API_BASE","window","location","hostname","WS_URL","REACT_APP_WS_URL","haversine","lat1","lon1","lat2","lon2","R","toRad","d","Math","PI","dLat","dLon","a","sin","cos","atan2","sqrt","findClosestSector","lat","lon","sectors","minDist","Infinity","closestIdx","forEach","s","i","RacePage","_s","_circuitData$stats","_circuitData$stats$le","_circuitData$params","_circuitData$sectors","setupMode","setSetupMode","circuits","setCircuits","selectedCircuit","setSelectedCircuit","circuitData","setCircuitData","allPilots","setAllPilots","selectedPilots","setSelectedPilots","totalLaps","setTotalLaps","pilots","setPilots","raceActive","setRaceActive","driversState","setDriversState","leaderboard","setLeaderboard","activeBattles","setActiveBattles","canvasRef","wsRef","animFrameRef","fetch","then","r","json","data","catch","e","console","error","_data$sectors","log","name","length","current","close","ws","WebSocket","onopen","onclose","onerror","onmessage","event","gps","JSON","parse","handleGPSUpdate","readyState","OPEN","mac","speedKmh","ts","sectorIdx","totalSectors","prev","existing","slice","lapCount","lastLapTime","bestLapTime","lastSectorIdx","lapStartTime","Date","now","trail","color","random","newLapCount","newLapTime","newBestLap","lapDuration","toFixed","newTrail","updatedAt","sorted","Object","values","sort","b","battles","driver1","driver2","dist","push","leader","chaser","distance","position","canvas","ctx","getContext","dpr","devicePixelRatio","resizeCanvas","rect","getBoundingClientRect","width","height","scale","style","addEventListener","animate","w","h","fillStyle","fillRect","strokeStyle","lineWidth","gridSize","x","beginPath","moveTo","lineTo","stroke","y","pathPoints","font","textAlign","fillText","requestAnimationFrame","lats","map","p","lons","minLat","min","maxLat","max","minLon","maxLon","latRange","lonRange","padding","usableW","usableH","scaleX","scaleY","trackW","trackH","offsetX","offsetY","project","trackWidthPx","lineCap","lineJoin","shadowColor","shadowBlur","setLineDash","globalAlpha","startPt","nextPt","x1","y1","x2","y2","trackAngle","perpAngle","flagWidth","flagHeight","checkSize","save","translate","rotate","numChecksW","ceil","numChecksH","j","isWhite","restore","textBaseline","textOffsetX","textOffsetY","sectorInterval","floor","sector","arc","fill","driversArray","driver","alpha","pt1","pt2","sortedDrivers","index","isLeader","pilotSize","borderSize","shadowOffsetX","shadowOffsetY","pulse","gapText","lapDiff","sectorDiff","estimatedGap","textMetrics","measureText","textWidth","textHeight","driverName","nameMetrics","removeEventListener","cancelAnimationFrame","handleStartRace","alert","filter","includes","togglePilotSelection","m","formatLapTime","seconds","mins","secs","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","circuit","id","onClick","lengthMeters","points","pilot","background","disabled","ref","stats","params","widthMeters","pos","battle","find","Fragment","gapDisplay","speed","_c","$RefreshReg$"],"sources":["/home/ubuntu/racesense/racesense-frontend/src/pages/Race.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './Race.css';\n\nconst API_BASE = process.env.REACT_APP_API_BASE || `http://${window.location.hostname}:5000`;\nconst WS_URL = process.env.REACT_APP_WS_URL || `ws://${window.location.hostname}:5001`;\n\n// Utility: calcola distanza Haversine (m)\nfunction haversine(lat1, lon1, lat2, lon2) {\n  const R = 6371000;\n  const toRad = d => d * Math.PI / 180;\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) ** 2 + \n            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2;\n  return R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\n// Trova il settore più vicino al punto GPS\nfunction findClosestSector(lat, lon, sectors) {\n  let minDist = Infinity;\n  let closestIdx = 0;\n  sectors.forEach((s, i) => {\n    const d = haversine(lat, lon, s.lat, s.lon);\n    if (d < minDist) {\n      minDist = d;\n      closestIdx = i;\n    }\n  });\n  return closestIdx;\n}\n\nexport default function RacePage() {\n  // ========== SETUP GARA ==========\n  const [setupMode, setSetupMode] = useState(true); // true = setup, false = racing\n  const [circuits, setCircuits] = useState([]);\n  const [selectedCircuit, setSelectedCircuit] = useState(null);\n  const [circuitData, setCircuitData] = useState(null);\n  const [allPilots, setAllPilots] = useState([]); // Tutti i piloti disponibili\n  const [selectedPilots, setSelectedPilots] = useState([]); // Piloti selezionati per la gara\n  const [totalLaps, setTotalLaps] = useState(10); // Giri da completare\n  \n  // ========== STATO GARA ==========\n  const [pilots, setPilots] = useState([]); // Piloti in gara\n  const [raceActive, setRaceActive] = useState(false);\n  const [driversState, setDriversState] = useState({}); // { MAC: { lat, lon, speed, sectorIdx, lapCount, lastLapTime, ... } }\n  const [leaderboard, setLeaderboard] = useState([]); // Classifica ordinata\n  const [activeBattles, setActiveBattles] = useState([]); // Battaglie in corso\n  \n  const canvasRef = useRef(null);\n  const wsRef = useRef(null);\n  const animFrameRef = useRef(null);\n\n  // ========== Carica circuiti e piloti disponibili ==========\n  useEffect(() => {\n    fetch(`${API_BASE}/api/circuits`)\n      .then(r => r.json())\n      .then(data => setCircuits(data))\n      .catch(e => console.error('Errore caricamento circuiti:', e));\n    \n    fetch(`${API_BASE}/api/pilots`)\n      .then(r => r.json())\n      .then(data => setAllPilots(data))\n      .catch(e => console.error('Errore caricamento piloti:', e));\n  }, []);\n\n  // ========== Carica dettagli circuito selezionato ==========\n  useEffect(() => {\n    if (!selectedCircuit) {\n      setCircuitData(null);\n      return;\n    }\n    fetch(`${API_BASE}/api/circuits/${selectedCircuit}`)\n      .then(r => r.json())\n      .then(data => {\n        setCircuitData(data);\n        console.log(`Circuito caricato: ${data.name}, settori: ${data.sectors?.length || 0}`);\n      })\n      .catch(e => console.error('Errore caricamento circuito:', e));\n  }, [selectedCircuit]);\n\n  // ========== WebSocket GPS Live ==========\n  useEffect(() => {\n    if (!raceActive) {\n      if (wsRef.current) {\n        wsRef.current.close();\n        wsRef.current = null;\n      }\n      return;\n    }\n\n    const ws = new WebSocket(WS_URL);\n    wsRef.current = ws;\n\n    ws.onopen = () => console.log('[WS] Connesso al feed GPS');\n    ws.onclose = () => console.log('[WS] Disconnesso');\n    ws.onerror = (e) => console.error('[WS] Errore:', e);\n    \n    ws.onmessage = (event) => {\n      try {\n        const gps = JSON.parse(event.data);\n        handleGPSUpdate(gps);\n      } catch (e) {\n        console.error('[WS] Parse error:', e);\n      }\n    };\n\n    return () => {\n      if (ws.readyState === WebSocket.OPEN) ws.close();\n    };\n  }, [raceActive]);\n\n  // ========== Gestione aggiornamenti GPS ==========\n  const handleGPSUpdate = useCallback((gps) => {\n    if (!circuitData?.sectors) return;\n\n    const { mac, lat, lon, speedKmh, ts } = gps;\n    const sectorIdx = findClosestSector(lat, lon, circuitData.sectors);\n    const totalSectors = circuitData.sectors.length;\n\n    setDriversState(prev => {\n      const existing = prev[mac] || {\n        mac,\n        name: `Driver ${mac.slice(-4)}`,\n        lat,\n        lon,\n        speedKmh: 0,\n        sectorIdx: sectorIdx,\n        lapCount: 0,\n        lastLapTime: null,\n        bestLapTime: null,\n        lastSectorIdx: sectorIdx,\n        lapStartTime: Date.now(),\n        trail: [], // ultimi N punti per scia\n        color: `hsl(${Math.random() * 360}, 75%, 55%)`, // Colori più saturi\n      };\n\n      // Rileva crossing linea traguardo (settore 0)\n      let newLapCount = existing.lapCount;\n      let newLapTime = existing.lastLapTime;\n      let newBestLap = existing.bestLapTime;\n\n      if (existing.lastSectorIdx > totalSectors - 10 && sectorIdx < 10) {\n        // Probabile completamento giro\n        const lapDuration = (Date.now() - existing.lapStartTime) / 1000; // secondi\n        if (lapDuration > 5) { // Evita falsi positivi\n          newLapCount = existing.lapCount + 1;\n          newLapTime = lapDuration;\n          if (!newBestLap || lapDuration < newBestLap) {\n            newBestLap = lapDuration;\n          }\n          console.log(`[LAP] ${mac} completato giro ${newLapCount} in ${lapDuration.toFixed(2)}s`);\n        }\n      }\n\n      // Aggiorna trail (max 20 punti)\n      const newTrail = [...existing.trail, { lat, lon }].slice(-20);\n\n      return {\n        ...prev,\n        [mac]: {\n          ...existing,\n          lat,\n          lon,\n          speedKmh,\n          sectorIdx,\n          lastSectorIdx: sectorIdx,\n          lapCount: newLapCount,\n          lastLapTime: newLapTime,\n          bestLapTime: newBestLap,\n          lapStartTime: newLapCount > existing.lapCount ? Date.now() : existing.lapStartTime,\n          trail: newTrail,\n          updatedAt: Date.now(),\n        }\n      };\n    });\n  }, [circuitData]);\n\n  // ========== Aggiorna classifica e rileva battaglie ==========\n  useEffect(() => {\n    const sorted = Object.values(driversState).sort((a, b) => {\n      if (a.lapCount !== b.lapCount) return b.lapCount - a.lapCount;\n      return b.sectorIdx - a.sectorIdx;\n    });\n    setLeaderboard(sorted);\n    \n    // Rileva battaglie (piloti < 20m di distanza sullo stesso giro)\n    const battles = [];\n    for (let i = 0; i < sorted.length - 1; i++) {\n      const driver1 = sorted[i]; // Davanti\n      const driver2 = sorted[i + 1]; // Dietro\n      \n      // Solo se stesso giro\n      if (driver1.lapCount === driver2.lapCount) {\n        const dist = haversine(driver1.lat, driver1.lon, driver2.lat, driver2.lon);\n        if (dist < 20) { // Meno di 20 metri\n          battles.push({\n            leader: driver1,\n            chaser: driver2,\n            distance: dist,\n            position: i + 1 // Posizione del leader\n          });\n        }\n      }\n    }\n    setActiveBattles(battles);\n  }, [driversState]);\n\n  // ========== Rendering Canvas ==========\n  useEffect(() => {\n    if (!circuitData || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const dpr = window.devicePixelRatio || 1;\n\n    const resizeCanvas = () => {\n      const rect = canvas.getBoundingClientRect();\n      canvas.width = rect.width * dpr;\n      canvas.height = rect.height * dpr;\n      ctx.scale(dpr, dpr);\n      canvas.style.width = `${rect.width}px`;\n      canvas.style.height = `${rect.height}px`;\n    };\n\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    const animate = () => {\n      const w = canvas.width / dpr;\n      const h = canvas.height / dpr;\n\n      // Clear con sfondo scuro\n      ctx.fillStyle = '#0a0e1a';\n      ctx.fillRect(0, 0, w, h);\n\n      // ========== GRIGLIA SFONDO (stile F1 telemetria) ==========\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.03)';\n      ctx.lineWidth = 1;\n      const gridSize = 40;\n      \n      for (let x = 0; x < w; x += gridSize) {\n        ctx.beginPath();\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, h);\n        ctx.stroke();\n      }\n      \n      for (let y = 0; y < h; y += gridSize) {\n        ctx.beginPath();\n        ctx.moveTo(0, y);\n        ctx.lineTo(w, y);\n        ctx.stroke();\n      }\n\n      if (!circuitData.pathPoints || circuitData.pathPoints.length === 0) {\n        ctx.fillStyle = '#fff';\n        ctx.font = '16px \"Roboto Mono\", monospace';\n        ctx.textAlign = 'center';\n        ctx.fillText('Caricamento tracciato...', w / 2, h / 2);\n        animFrameRef.current = requestAnimationFrame(animate);\n        return;\n      }\n\n      // ========== Calcola bounds per fitting (converti lat/lon in coordinate schermo) ==========\n      const lats = circuitData.pathPoints.map(p => p.lat);\n      const lons = circuitData.pathPoints.map(p => p.lon);\n      const minLat = Math.min(...lats);\n      const maxLat = Math.max(...lats);\n      const minLon = Math.min(...lons);\n      const maxLon = Math.max(...lons);\n\n      const latRange = maxLat - minLat || 1e-5;\n      const lonRange = maxLon - minLon || 1e-5;\n\n      // Calcola fattore di scala per lat/lon → pixel, mantenendo aspect ratio\n      const padding = 60;\n      const usableW = w - 2 * padding;\n      const usableH = h - 2 * padding;\n\n      // Scala in base al range più grande\n      const scaleX = usableW / lonRange;\n      const scaleY = usableH / latRange;\n      const scale = Math.min(scaleX, scaleY);\n\n      // Centro il tracciato\n      const trackW = lonRange * scale;\n      const trackH = latRange * scale;\n      const offsetX = (w - trackW) / 2;\n      const offsetY = (h - trackH) / 2;\n\n      // Funzione di proiezione: lat/lon → x,y canvas\n      const project = (lat, lon) => {\n        const x = offsetX + (lon - minLon) * scale;\n        const y = offsetY + (maxLat - lat) * scale; // inverti Y (lat cresce verso l'alto)\n        return { x, y };\n      };\n\n      // ========== PISTA: Disegna bordo esterno scuro (asfalto) ==========\n      const trackWidthPx = Math.max(25, 40); // Larghezza pista in pixel\n      \n      ctx.strokeStyle = '#1a2332';\n      ctx.lineWidth = trackWidthPx + 12;\n      ctx.lineCap = 'round';\n      ctx.lineJoin = 'round';\n      ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\n      ctx.shadowBlur = 20;\n\n      ctx.beginPath();\n      circuitData.pathPoints.forEach((p, i) => {\n        const { x, y } = project(p.lat, p.lon);\n        if (i === 0) ctx.moveTo(x, y);\n        else ctx.lineTo(x, y);\n      });\n      ctx.stroke();\n      ctx.shadowBlur = 0;\n\n      // ========== PISTA: Asfalto principale ==========\n      ctx.strokeStyle = '#2d3f56';\n      ctx.lineWidth = trackWidthPx;\n      ctx.stroke();\n\n      // ========== PISTA: Linea centrale tratteggiata ==========\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.15)';\n      ctx.lineWidth = 2;\n      ctx.setLineDash([10, 10]);\n      \n      ctx.beginPath();\n      circuitData.pathPoints.forEach((p, i) => {\n        const { x, y } = project(p.lat, p.lon);\n        if (i === 0) ctx.moveTo(x, y);\n        else ctx.lineTo(x, y);\n      });\n      ctx.stroke();\n      ctx.setLineDash([]); // Reset dash\n\n      // ========== PISTA: Bordi bianchi (vie di fuga) ==========\n      ctx.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n      ctx.lineWidth = trackWidthPx + 2;\n      ctx.globalAlpha = 0.3;\n      ctx.stroke();\n      ctx.globalAlpha = 1;\n\n      // ========== LINEA TRAGUARDO (Start/Finish) - Perpendicolare alla pista ==========\n      if (circuitData.pathPoints && circuitData.pathPoints.length > 5) {\n        const startPt = circuitData.pathPoints[0];\n        const nextPt = circuitData.pathPoints[3]; // Usa un punto più lontano per angolo preciso\n        const { x: x1, y: y1 } = project(startPt.lat, startPt.lon);\n        const { x: x2, y: y2 } = project(nextPt.lat, nextPt.lon);\n        \n        // Calcola angolo della pista\n        const trackAngle = Math.atan2(y2 - y1, x2 - x1);\n        \n        // PERPENDICULAR: ruota di 90 gradi rispetto alla direzione della pista\n        const perpAngle = trackAngle + Math.PI / 2;\n        \n        // Dimensioni bandiera (attraversa la pista)\n        const flagWidth = trackWidthPx * 0.85; // Larghezza che copre la pista\n        const flagHeight = 5; // Altezza sottile\n        const checkSize = 5;\n        \n        ctx.save();\n        ctx.translate(x1, y1);\n        ctx.rotate(perpAngle); // Ruota perpendicolare\n        \n        // Pattern a scacchi (bianco/nero) - SOLO QUESTO, NESSUN BORDO\n        const numChecksW = Math.ceil(flagWidth / checkSize);\n        const numChecksH = Math.ceil(flagHeight / checkSize);\n        \n        for (let i = 0; i < numChecksW; i++) {\n          for (let j = 0; j < numChecksH; j++) {\n            const isWhite = (i + j) % 2 === 0;\n            ctx.fillStyle = isWhite ? '#ffffff' : '#000000';\n            ctx.fillRect(\n              -flagWidth / 2 + i * checkSize,\n              -flagHeight / 2 + j * checkSize,\n              checkSize,\n              checkSize\n            );\n          }\n        }\n        \n        ctx.restore();\n        \n        // Testo \"START\" piccolo e discreto\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';\n        ctx.font = 'bold 8px \"Roboto Mono\", monospace';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        \n        // Calcola posizione testo sopra la linea (perpendicolare alla pista)\n        const textOffsetX = Math.cos(perpAngle) * 10;\n        const textOffsetY = Math.sin(perpAngle) * 10;\n        ctx.fillText('START', x1 - textOffsetX, y1 - textOffsetY);\n      }\n\n      // ========== SETTORI: Visualizza marker ogni N settori ==========\n      if (circuitData.sectors && circuitData.sectors.length > 50) {\n        const sectorInterval = Math.floor(circuitData.sectors.length / 8); // 8 marker\n        ctx.fillStyle = 'rgba(225, 6, 0, 0.6)';\n        ctx.font = 'bold 10px \"Roboto Mono\", monospace';\n        ctx.textAlign = 'center';\n        \n        for (let i = 0; i < circuitData.sectors.length; i += sectorInterval) {\n          if (i === 0) continue; // Skip start/finish\n          const sector = circuitData.sectors[i];\n          const { x, y } = project(sector.lat, sector.lon);\n          \n          // Pallino settore\n          ctx.beginPath();\n          ctx.arc(x, y, 4, 0, Math.PI * 2);\n          ctx.fill();\n          \n          // Numero settore\n          ctx.fillStyle = '#fff';\n          ctx.fillText(`S${i}`, x, y - 10);\n          ctx.fillStyle = 'rgba(225, 6, 0, 0.6)';\n        }\n      }\n\n      // ========== PRIMA: Disegna tutte le scie (dietro i piloti) ==========\n      const driversArray = Object.values(driversState);\n      \n      driversArray.forEach(driver => {\n        const { lat, lon, trail, color } = driver;\n        \n        if (trail && trail.length > 1) {\n          // Gradiente fade-out sulla scia\n          ctx.strokeStyle = color;\n          ctx.lineWidth = 3;\n          ctx.lineCap = 'round';\n          ctx.lineJoin = 'round';\n          \n          for (let i = 0; i < trail.length - 1; i++) {\n            const alpha = (i / trail.length) * 0.4; // Fade da 0 a 0.4\n            ctx.globalAlpha = alpha;\n            \n            const pt1 = trail[i];\n            const pt2 = trail[i + 1];\n            const { x: x1, y: y1 } = project(pt1.lat, pt1.lon);\n            const { x: x2, y: y2 } = project(pt2.lat, pt2.lon);\n            \n            ctx.beginPath();\n            ctx.moveTo(x1, y1);\n            ctx.lineTo(x2, y2);\n            ctx.stroke();\n          }\n          ctx.globalAlpha = 1;\n        }\n      });\n\n      // ========== DOPO: Disegna piloti ordinati per posizione (ultimo → primo) ==========\n      // Ordina: chi è dietro viene disegnato prima, chi è davanti ultimo (sopra)\n      const sortedDrivers = [...driversArray].sort((a, b) => {\n        // Ordina per giri + settori (chi è più indietro prima)\n        if (a.lapCount !== b.lapCount) return a.lapCount - b.lapCount;\n        return a.sectorIdx - b.sectorIdx;\n      });\n\n      sortedDrivers.forEach((driver, index) => {\n        const { lat, lon, color, speedKmh, mac } = driver;\n        const { x, y } = project(lat, lon);\n        \n        const isLeader = index === sortedDrivers.length - 1; // Ultimo nell'array = primo in gara\n        const pilotSize = isLeader ? 7 : 6; // Ridotti: leader 7px, altri 6px\n        const borderSize = 1.5; // Bordo più sottile\n        \n        // ===== Ombra per profondità =====\n        ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';\n        ctx.shadowBlur = 6;\n        ctx.shadowOffsetX = 1;\n        ctx.shadowOffsetY = 1;\n        \n        // ===== Alone esterno (solo leader) =====\n        if (isLeader) {\n          const pulse = 1 + 0.15 * Math.sin(Date.now() / 250);\n          ctx.fillStyle = color;\n          ctx.globalAlpha = 0.3;\n          ctx.beginPath();\n          ctx.arc(x, y, 12 * pulse, 0, Math.PI * 2); // Ridotto da 16 a 12\n          ctx.fill();\n          ctx.globalAlpha = 1;\n        }\n        \n        // ===== Cerchio pilota con bordo bianco =====\n        // Bordo esterno bianco (più sottile)\n        ctx.fillStyle = '#ffffff';\n        ctx.beginPath();\n        ctx.arc(x, y, pilotSize + borderSize, 0, Math.PI * 2);\n        ctx.fill();\n        \n        // Cerchio interno colorato\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.arc(x, y, pilotSize, 0, Math.PI * 2);\n        ctx.fill();\n        \n        // Reset ombra\n        ctx.shadowColor = 'transparent';\n        ctx.shadowBlur = 0;\n        ctx.shadowOffsetX = 0;\n        ctx.shadowOffsetY = 0;\n        \n        // ===== GAP dal Leader (distacco in tempo) =====\n        let gapText = '';\n        if (isLeader) {\n          gapText = '1°'; // Leader mostra posizione\n        } else {\n          // Calcola distacco basato su giri + settori\n          const leader = sortedDrivers[sortedDrivers.length - 1];\n          \n          if (driver.lapCount < leader.lapCount) {\n            // Giro/i di distacco\n            const lapDiff = leader.lapCount - driver.lapCount;\n            gapText = `+${lapDiff}L`;\n          } else {\n            // Stesso giro: calcola distacco in settori (approssimazione tempo)\n            const sectorDiff = leader.sectorIdx - driver.sectorIdx;\n            if (sectorDiff > 0) {\n              // Stima: ~1 settore = ~0.01s (dipende dalla lunghezza)\n              const estimatedGap = (sectorDiff / 10).toFixed(1);\n              gapText = `+${estimatedGap}s`;\n            } else {\n              gapText = '+0.0s';\n            }\n          }\n        }\n        \n        ctx.font = 'bold 9px \"Roboto Mono\", monospace';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        \n        // Sfondo scuro dietro il gap\n        const textMetrics = ctx.measureText(gapText);\n        const textWidth = textMetrics.width;\n        const textHeight = 11;\n        \n        ctx.fillStyle = 'rgba(0, 0, 0, 0.8)';\n        ctx.fillRect(\n          x - textWidth / 2 - 2,\n          y - pilotSize - 15 - textHeight / 2,\n          textWidth + 4,\n          textHeight\n        );\n        \n        // Testo gap (verde per leader, bianco per altri)\n        ctx.fillStyle = isLeader ? '#15c130' : '#fff';\n        ctx.fillText(gapText, x, y - pilotSize - 15);\n        \n        // ===== Nome pilota (solo per leader - più compatto) =====\n        if (isLeader) {\n          const driverName = driver.name || `#${mac.slice(-4)}`;\n          ctx.font = 'bold 9px \"Roboto Mono\", monospace'; // Più piccolo\n          const nameMetrics = ctx.measureText(driverName);\n          \n          // Sfondo rosso più sottile\n          ctx.fillStyle = 'rgba(225, 6, 0, 0.9)';\n          ctx.fillRect(\n            x - nameMetrics.width / 2 - 3,\n            y + pilotSize + 6,\n            nameMetrics.width + 6,\n            12\n          );\n          \n          // Testo\n          ctx.fillStyle = '#fff';\n          ctx.fillText(driverName, x, y + pilotSize + 12);\n        }\n      });\n\n      animFrameRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      window.removeEventListener('resize', resizeCanvas);\n      if (animFrameRef.current) cancelAnimationFrame(animFrameRef.current);\n    };\n  }, [circuitData, driversState]);\n\n  // ========== Handler avvio gara ==========\n  const handleStartRace = () => {\n    if (!selectedCircuit || selectedPilots.length === 0) {\n      alert('Seleziona almeno un circuito e un pilota!');\n      return;\n    }\n    \n    // Imposta i piloti selezionati come piloti in gara\n    setPilots(allPilots.filter(p => selectedPilots.includes(p.mac)));\n    setSetupMode(false);\n    setRaceActive(true);\n  };\n\n  // ========== Toggle selezione pilota ==========\n  const togglePilotSelection = (mac) => {\n    setSelectedPilots(prev => \n      prev.includes(mac) \n        ? prev.filter(m => m !== mac)\n        : [...prev, mac]\n    );\n  };\n\n  // ========== Formatta tempo giro (s → mm:ss.ms) ==========\n  const formatLapTime = (seconds) => {\n    if (!seconds) return '--:--.---';\n    const mins = Math.floor(seconds / 60);\n    const secs = (seconds % 60).toFixed(3);\n    return `${mins}:${secs.padStart(6, '0')}`;\n  };\n\n  // ========== UI ==========\n  return (\n    <div className=\"race-page\">\n      {/* Header con logo stile F1 */}\n      <header className=\"race-header\">\n        <div className=\"race-header-left\">\n          <div className=\"race-logo\">🏁 RACESENSE</div>\n          <div className=\"race-title\">{setupMode ? 'SETUP GARA' : 'LIVE RACE'}</div>\n        </div>\n        <div className=\"race-header-right\">\n          {raceActive && circuitData && (\n            <div className=\"circuit-badge\">\n              <span className=\"circuit-icon\">🛣️</span>\n              <span className=\"circuit-name\">{circuitData.name}</span>\n            </div>\n          )}\n        </div>\n      </header>\n\n      {setupMode ? (\n        // ========== SCHERMATA SETUP GARA ==========\n        <div className=\"race-setup\">\n          <div className=\"setup-container\">\n            {/* Selezione Circuito */}\n            <div className=\"setup-section\">\n              <h2 className=\"setup-title\">🛣️ SELEZIONA CIRCUITO</h2>\n              <div className=\"circuits-grid\">\n                {circuits.map(circuit => (\n                  <div \n                    key={circuit.id}\n                    className={`circuit-card ${selectedCircuit === circuit.id ? 'selected' : ''}`}\n                    onClick={() => setSelectedCircuit(circuit.id)}\n                  >\n                    <div className=\"circuit-card-header\">\n                      <span className=\"circuit-name\">{circuit.name}</span>\n                      {selectedCircuit === circuit.id && <span className=\"check-icon\">✓</span>}\n                    </div>\n                    <div className=\"circuit-card-body\">\n                      <div className=\"circuit-stat\">\n                        <span className=\"stat-icon\">📏</span>\n                        <span>{(circuit.lengthMeters || 0).toFixed(0)}m</span>\n                      </div>\n                      <div className=\"circuit-stat\">\n                        <span className=\"stat-icon\">📍</span>\n                        <span>{circuit.points || 0} punti</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Selezione Piloti */}\n            <div className=\"setup-section\">\n              <h2 className=\"setup-title\">👥 SELEZIONA PILOTI ({selectedPilots.length})</h2>\n              <div className=\"pilots-grid\">\n                {allPilots.map(pilot => (\n                  <div \n                    key={pilot.mac}\n                    className={`pilot-card ${selectedPilots.includes(pilot.mac) ? 'selected' : ''}`}\n                    onClick={() => togglePilotSelection(pilot.mac)}\n                  >\n                    <div className=\"pilot-color\" style={{ background: pilot.color }}></div>\n                    <div className=\"pilot-info\">\n                      <span className=\"pilot-name\">{pilot.name}</span>\n                      <span className=\"pilot-mac\">{pilot.mac}</span>\n                    </div>\n                    {selectedPilots.includes(pilot.mac) && <span className=\"check-icon\">✓</span>}\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Numero Giri */}\n            <div className=\"setup-section\">\n              <h2 className=\"setup-title\">🏁 NUMERO GIRI</h2>\n              <div className=\"laps-selector\">\n                <button \n                  className=\"lap-btn\"\n                  onClick={() => setTotalLaps(Math.max(1, totalLaps - 1))}\n                >\n                  -\n                </button>\n                <div className=\"laps-display\">\n                  <span className=\"laps-number\">{totalLaps}</span>\n                  <span className=\"laps-label\">GIRI</span>\n                </div>\n                <button \n                  className=\"lap-btn\"\n                  onClick={() => setTotalLaps(totalLaps + 1)}\n                >\n                  +\n                </button>\n              </div>\n            </div>\n\n            {/* Pulsante Avvio */}\n            <button \n              className=\"start-race-btn-main\"\n              disabled={!selectedCircuit || selectedPilots.length === 0}\n              onClick={handleStartRace}\n            >\n              <span className=\"btn-icon\">🚦</span>\n              <span className=\"btn-text\">AVVIA GARA</span>\n              <span className=\"btn-subtitle\">\n                {selectedCircuit && selectedPilots.length > 0 \n                  ? `${selectedPilots.length} piloti × ${totalLaps} giri`\n                  : 'Seleziona circuito e piloti'\n                }\n              </span>\n            </button>\n          </div>\n        </div>\n      ) : (\n        // ========== Vista gara live ==========\n        <div className=\"race-live\">\n          <div className=\"race-main\">\n            {/* Canvas pista */}\n            <div className=\"track-container\">\n              <canvas ref={canvasRef} className=\"track-canvas\" />\n              \n              {/* Overlay info */}\n              <div className=\"track-overlay\">\n                <div className=\"live-indicator\">\n                  <span className=\"live-dot\"></span>\n                  LIVE\n                </div>\n                \n                {/* Info tracciato */}\n                {circuitData && (\n                  <div className=\"track-info\">\n                    <div className=\"track-stat\">\n                      <span className=\"stat-icon\">📏</span>\n                      <span className=\"stat-text\">{circuitData.stats?.lengthMeters?.toFixed(0)}m</span>\n                    </div>\n                    <div className=\"track-stat\">\n                      <span className=\"stat-icon\">🛣️</span>\n                      <span className=\"stat-text\">{circuitData.params?.widthMeters || 6}m wide</span>\n                    </div>\n                    <div className=\"track-stat\">\n                      <span className=\"stat-icon\">📍</span>\n                      <span className=\"stat-text\">{circuitData.sectors?.length || 0} sectors</span>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Classifica laterale stile F1 */}\n            <aside className=\"leaderboard\">\n              <div className=\"leaderboard-header\">\n                <h3>🏆 CLASSIFICA</h3>\n                <div className=\"leaderboard-subtitle\">\n                  {leaderboard.length} Piloti in pista\n                </div>\n              </div>\n              \n              <div className=\"leaderboard-list\">\n                {leaderboard.length === 0 ? (\n                  <div className=\"no-drivers\">\n                    <p>⏳ In attesa di dati GPS...</p>\n                    <small>Avvia il simulatore o connetti dispositivi GPS</small>\n                  </div>\n                ) : (\n                  leaderboard.map((driver, pos) => {\n                    // Trova se questo pilota è in battle (come leader)\n                    const battle = activeBattles.find(b => b.leader.mac === driver.mac);\n                    \n                    return (\n                      <React.Fragment key={driver.mac}>\n                        <div className={`leaderboard-item ${pos === 0 ? 'leader' : ''}`}>\n                          <div className=\"position\">{pos + 1}</div>\n                          \n                          <div className=\"driver-color\" style={{ background: driver.color }}></div>\n                          \n                          <div className=\"driver-info\">\n                            <div className=\"driver-name\">\n                              {driver.name}\n                              {pos === 0 && <span className=\"leader-badge\">👑</span>}\n                            </div>\n                            <div className=\"driver-stats\">\n                              <span className=\"lap-count\">Giro {driver.lapCount}</span>\n                              <span className=\"sector\">S{driver.sectorIdx}</span>\n                            </div>\n                          </div>\n                          \n                          <div className=\"driver-times\">\n                            {/* Gap dal leader */}\n                            {pos === 0 ? (\n                              <div className=\"gap leader-gap\">LEADER</div>\n                            ) : (() => {\n                              const leader = leaderboard[0];\n                              let gapDisplay = '';\n                              \n                              if (driver.lapCount < leader.lapCount) {\n                                const lapDiff = leader.lapCount - driver.lapCount;\n                                gapDisplay = `+${lapDiff} ${lapDiff === 1 ? 'LAP' : 'LAPS'}`;\n                              } else {\n                                const sectorDiff = leader.sectorIdx - driver.sectorIdx;\n                                if (sectorDiff > 0) {\n                                  const estimatedGap = (sectorDiff / 10).toFixed(1);\n                                  gapDisplay = `+${estimatedGap}s`;\n                                } else {\n                                  gapDisplay = '+0.0s';\n                                }\n                              }\n                              \n                              return <div className=\"gap\">{gapDisplay}</div>;\n                            })()}\n                            \n                            {driver.bestLapTime && (\n                              <div className=\"best-lap\">\n                                ⏱️ {formatLapTime(driver.bestLapTime)}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        \n                        {/* BATTLE INFO INLINE - stile F1 minimalista */}\n                        {battle && (\n                          <div className=\"battle-inline\">\n                            <div className=\"battle-line\"></div>\n                            <div className=\"battle-info\">\n                              <span className=\"battle-icon\">⚔️</span>\n                              <span className=\"battle-gap\">{battle.distance.toFixed(1)}m</span>\n                              <span className=\"battle-speed\">\n                                {(battle.chaser.speed - battle.leader.speed) > 0 ? '↑' : '↓'}\n                              </span>\n                            </div>\n                            <div className=\"battle-line\"></div>\n                          </div>\n                        )}\n                      </React.Fragment>\n                    );\n                  })\n                )}\n              </div>\n            </aside>\n          </div>\n\n          {/* Controlli gara */}\n          <div className=\"race-controls\">\n            <button \n              className=\"stop-race-btn\"\n              onClick={() => {\n                setSetupMode(true);\n                setRaceActive(false);\n                setDriversState({});\n                setLeaderboard([]);\n                setSelectedPilots([]);\n              }}\n            >\n              ⏹️ Termina Gara\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}